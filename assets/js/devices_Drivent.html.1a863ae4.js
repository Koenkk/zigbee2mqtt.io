"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[12796],{75799:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>i,data:()=>s});var a=o(60362);const d={},i=(0,o(60654).A)(d,[["render",function(e,t){const o=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[t[11]||(t[11]=(0,a.Lk)("h1",{id:"sprut-device-drivent",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#sprut-device-drivent"},[(0,a.Lk)("span",null,"Sprut.device Drivent")])],-1)),(0,a.Lk)("table",null,[t[6]||(t[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[t[2]||(t[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"Drivent")],-1)),(0,a.Lk)("tr",null,[t[1]||(t[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(o,{to:"/supported-devices/#v=Sprut.device"},{default:(0,a.k6)(()=>[...t[0]||(t[0]=[(0,a.eW)("Sprut.device",-1)])]),_:1})])]),t[3]||(t[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Drivent window drive")],-1)),t[4]||(t[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"cover (state, position), drive_state, blocked_jam, blocked_many, reset_block, speed, open_limit, close_limit, reset_limit, calibrate, wifi")],-1)),t[5]||(t[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/Drivent.png",alt:"Sprut.device Drivent"})])],-1))])]),t[12]||(t[12]=(0,a.Lk)("h2",{id:"ota-updates",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#ota-updates"},[(0,a.Lk)("span",null,"OTA updates")])],-1)),(0,a.Lk)("p",null,[t[8]||(t[8]=(0,a.eW)("This device supports OTA updates, for more information see ",-1)),(0,a.bF)(o,{to:"/guide/usage/ota_updates.html"},{default:(0,a.k6)(()=>[...t[7]||(t[7]=[(0,a.eW)("OTA updates",-1)])]),_:1}),t[9]||(t[9]=(0,a.eW)(".",-1))]),t[13]||(t[13]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(o,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)(()=>[...t[10]||(t[10]=[(0,a.eW)("How to use device type specific configuration",-1)])]),_:1})])]),t[14]||(t[14]=(0,a.Fv)('<ul><li><p><code>invert_cover</code>: Inverts the cover position, false: open=100,close=0, true: open=0,close=100 (default false). The value must be <code>true</code> or <code>false</code></p></li><li><p><code>cover_position_tilt_disable_report</code>: Do not publish set cover target position as a normal &#39;position&#39; value (default false). The value must be <code>true</code> or <code>false</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="cover" tabindex="-1"><a class="header-anchor" href="#cover"><span>Cover</span></a></h3><p>The current state of this cover is in the published state under the <code>state</code> property (value is <code>OPEN</code> or <code>CLOSE</code>). To control this cover publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state&quot;: &quot;OPEN&quot;}</code>, <code>{&quot;state&quot;: &quot;CLOSE&quot;}</code>, <code>{&quot;state&quot;: &quot;STOP&quot;}</code>. It&#39;s not possible to read (<code>/get</code>) this value. To change the position publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;position&quot;: VALUE}</code> where <code>VALUE</code> is a number between <code>0</code> and <code>100</code>.</p><h3 id="drive-state-enum" tabindex="-1"><a class="header-anchor" href="#drive-state-enum"><span>Drive state (enum)</span></a></h3><p>Drive state. Value can be found in the published state on the <code>drive_state</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;drive_state&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The possible values are: <code>closing</code>, <code>opening</code>, <code>stopped</code>.</p><h3 id="blocked-jam-binary" tabindex="-1"><a class="header-anchor" href="#blocked-jam-binary"><span>Blocked jam (binary)</span></a></h3><p>Blocked after 5 jam. Value can be found in the published state on the <code>blocked_jam</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;blocked_jam&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. If value equals <code>ON</code> blocked jam is ON, if <code>OFF</code> OFF.</p><h3 id="blocked-many-binary" tabindex="-1"><a class="header-anchor" href="#blocked-many-binary"><span>Blocked many (binary)</span></a></h3><p>Blocked after 45 attempts. Value can be found in the published state on the <code>blocked_many</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;blocked_many&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. If value equals <code>ON</code> blocked many is ON, if <code>OFF</code> OFF.</p><h3 id="reset-block-enum" tabindex="-1"><a class="header-anchor" href="#reset-block-enum"><span>Reset block (enum)</span></a></h3><p>Reset block. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;reset_block&quot;: NEW_VALUE}</code>. The possible values are: <code>SEND</code>.</p><h3 id="speed-numeric" tabindex="-1"><a class="header-anchor" href="#speed-numeric"><span>Speed (numeric)</span></a></h3><p>Speed. Value can be found in the published state on the <code>speed</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;speed&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;speed&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p><h3 id="open-limit-enum" tabindex="-1"><a class="header-anchor" href="#open-limit-enum"><span>Open limit (enum)</span></a></h3><p>Set open limit. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;open_limit&quot;: NEW_VALUE}</code>. The possible values are: <code>SEND</code>.</p><h3 id="close-limit-enum" tabindex="-1"><a class="header-anchor" href="#close-limit-enum"><span>Close limit (enum)</span></a></h3><p>Set close limit. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;close_limit&quot;: NEW_VALUE}</code>. The possible values are: <code>SEND</code>.</p><h3 id="reset-limit-enum" tabindex="-1"><a class="header-anchor" href="#reset-limit-enum"><span>Reset limit (enum)</span></a></h3><p>Reset limits. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;reset_limit&quot;: NEW_VALUE}</code>. The possible values are: <code>SEND</code>.</p><h3 id="calibrate-binary" tabindex="-1"><a class="header-anchor" href="#calibrate-binary"><span>Calibrate (binary)</span></a></h3><p>Calibration. Value can be found in the published state on the <code>calibrate</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;calibrate&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;calibrate&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> calibrate is ON, if <code>OFF</code> OFF.</p><h3 id="wifi-binary" tabindex="-1"><a class="header-anchor" href="#wifi-binary"><span>Wifi (binary)</span></a></h3><p>Enable Wifi AP. Value can be found in the published state on the <code>wifi</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;wifi&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;wifi&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> wifi is ON, if <code>OFF</code> OFF.</p>',24))])}]]),s=JSON.parse('{"path":"/devices/Drivent.html","title":"Sprut.device Drivent control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Sprut.device Drivent control via MQTT","description":"Integrate your Sprut.device Drivent via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-09-01T18:20:17.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/Drivent.md"}')}}]);