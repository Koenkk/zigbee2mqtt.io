"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[14531],{84281:(t,e,o)=>{o.r(e),o.d(e,{comp:()=>n,data:()=>s});var a=o(60362);const i={},n=(0,o(60654).A)(i,[["render",function(t,e){const o=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[e[8]||(e[8]=(0,a.Lk)("h1",{id:"orvibo-t40w4z",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#orvibo-t40w4z"},[(0,a.Lk)("span",null,"ORVIBO T40W4Z")])],-1)),(0,a.Lk)("table",null,[e[6]||(e[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[e[2]||(e[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"T40W4Z")],-1)),(0,a.Lk)("tr",null,[e[1]||(e[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(o,{to:"/supported-devices/#v=ORVIBO"},{default:(0,a.k6)(()=>[...e[0]||(e[0]=[(0,a.eW)("ORVIBO",-1)])]),_:1})])]),e[3]||(e[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"MixSwitch 4 gangs")],-1)),e[4]||(e[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"switch (state), action")],-1)),e[5]||(e[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/T40W4Z.png",alt:"ORVIBO T40W4Z"})])],-1))])]),e[9]||(e[9]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(o,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)(()=>[...e[7]||(e[7]=[(0,a.eW)("How to use device type specific configuration",-1)])]),_:1})])]),e[10]||(e[10]=(0,a.Fv)('<ul><li><p><code>state_action</code>: State actions will also be published as &#39;action&#39; when true (default false). The value must be <code>true</code> or <code>false</code></p></li><li><p><code>switch_actions</code>: Switch actions. Example:</p></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">switch_actions</span><span class="token punctuation">:</span></span>\n<span class="line">  <span class="token key atrule">sceneid</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># Scene id to recall. Set to 0 to recall none (0-255).</span></span>\n<span class="line">  <span class="token key atrule">sceneturnoffrelay</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># Relay id which set sceneid will change to off when scene is recalled. Set to 0 if no relay is affected by the scene. (0-4)</span></span>\n<span class="line">  <span class="token key atrule">relaynumber</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># Relay number to act on. Set to 0 to act on none. (0-4)</span></span>\n<span class="line">  <span class="token key atrule">relayaction</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># Relay operation to execute. 0 = OFF, 1 = ON, 2 = TOGGLE. (0-2)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="switch-left-up-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-left-up-endpoint"><span>Switch (left_up endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_left_up</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_left_up&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_left_up&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_left_up&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_left_up&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="switch-left-down-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-left-down-endpoint"><span>Switch (left_down endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_left_down</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_left_down&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_left_down&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_left_down&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_left_down&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off-1" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off-1"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="switch-center-up-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-center-up-endpoint"><span>Switch (center_up endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_center_up</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_center_up&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_center_up&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_center_up&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_center_up&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off-2" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off-2"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="switch-center-down-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-center-down-endpoint"><span>Switch (center_down endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_center_down</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_center_down&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_center_down&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_center_down&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_center_down&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off-3" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off-3"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="switch-right-up-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-right-up-endpoint"><span>Switch (right_up endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_right_up</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_right_up&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_right_up&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_right_up&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_right_up&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off-4" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off-4"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="switch-right-down-endpoint" tabindex="-1"><a class="header-anchor" href="#switch-right-down-endpoint"><span>Switch (right_down endpoint)</span></a></h3><p>The current state of this switch is in the published state under the <code>state_right_down</code> property (value is <code>ON</code> or <code>OFF</code>). To control this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state_right_down&quot;: &quot;ON&quot;}</code>, <code>{&quot;state_right_down&quot;: &quot;OFF&quot;}</code> or <code>{&quot;state_right_down&quot;: &quot;TOGGLE&quot;}</code>. To read the current state of this switch publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;state_right_down&quot;: &quot;&quot;}</code>.</p><h4 id="on-with-timed-off-5" tabindex="-1"><a class="header-anchor" href="#on-with-timed-off-5"><span>On with timed off</span></a></h4><p>When setting the state to ON, it might be possible to specify an automatic shutoff after a certain amount of time. To do this add an additional property <code>on_time</code> to the payload which is the time in seconds the state should remain on. Additionally an <code>off_wait_time</code> property can be added to the payload to specify the cooldown time in seconds when the switch will not answer to other on with timed off commands. Support depends on the switch firmware. Some devices might require both <code>on_time</code> and <code>off_wait_time</code> to work Examples : <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300}</code>, <code>{&quot;state&quot; : &quot;ON&quot;, &quot;on_time&quot;: 300, &quot;off_wait_time&quot;: 120}</code>.</p><h3 id="action-enum" tabindex="-1"><a class="header-anchor" href="#action-enum"><span>Action (enum)</span></a></h3><p>Triggered action (e.g. a button click). Value can be found in the published state on the <code>action</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>recall</code>, <code>store</code>, <code>add</code>, <code>remove</code>, <code>remove_all</code>.</p>',29))])}]]),s=JSON.parse('{"path":"/devices/T40W4Z.html","title":"ORVIBO T40W4Z control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"ORVIBO T40W4Z control via MQTT","description":"Integrate your ORVIBO T40W4Z via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2022-03-01T09:06:16.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/T40W4Z.md"}')}}]);