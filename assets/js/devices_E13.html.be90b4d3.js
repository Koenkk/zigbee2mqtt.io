"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[66029],{20449:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>n,data:()=>s});var o=a(60362);const d={},n=(0,a(60654).A)(d,[["render",function(e,t){const a=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[t[7]||(t[7]=(0,o.Lk)("h1",{id:"nous-e13",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#nous-e13"},[(0,o.Lk)("span",null,"NOUS E13")])],-1)),(0,o.Lk)("table",null,[t[6]||(t[6]=(0,o.Lk)("thead",null,[(0,o.Lk)("tr",null,[(0,o.Lk)("th"),(0,o.Lk)("th")])],-1)),(0,o.Lk)("tbody",null,[t[2]||(t[2]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Model"),(0,o.Lk)("td",null,"E13")],-1)),(0,o.Lk)("tr",null,[t[1]||(t[1]=(0,o.Lk)("td",null,"Vendor",-1)),(0,o.Lk)("td",null,[(0,o.bF)(a,{to:"/supported-devices/#v=NOUS"},{default:(0,o.k6)(()=>[...t[0]||(t[0]=[(0,o.eW)("NOUS",-1)])]),_:1})])]),t[3]||(t[3]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Description"),(0,o.Lk)("td",null,"Zigbee water leak sensor with sound alarm")],-1)),t[4]||(t[4]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Exposes"),(0,o.Lk)("td",null,"water_leak, battery, working_mode, status, alarm_ringtone")],-1)),t[5]||(t[5]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Picture"),(0,o.Lk)("td",null,[(0,o.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/E13.png",alt:"NOUS E13"})])],-1))])]),t[8]||(t[8]=(0,o.Fv)('<h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="water-leak-binary" tabindex="-1"><a class="header-anchor" href="#water-leak-binary"><span>Water leak (binary)</span></a></h3><p>Indicates whether the device detected a water leak. Value can be found in the published state on the <code>water_leak</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> water leak is ON, if <code>false</code> OFF.</p><h3 id="battery-numeric" tabindex="-1"><a class="header-anchor" href="#battery-numeric"><span>Battery (numeric)</span></a></h3><p>Remaining battery in %, can take up to 24 hours before reported. Value can be found in the published state on the <code>battery</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p><h3 id="working-mode-enum" tabindex="-1"><a class="header-anchor" href="#working-mode-enum"><span>Working mode (enum)</span></a></h3><p>Operational mode of the device. Value can be found in the published state on the <code>working_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;working_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;working_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>normal</code>, <code>silent</code>, <code>test</code>.</p><h3 id="status-text" tabindex="-1"><a class="header-anchor" href="#status-text"><span>Status (text)</span></a></h3><p>Device status. Value can be found in the published state on the <code>status</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value.</p><h3 id="alarm-ringtone-enum" tabindex="-1"><a class="header-anchor" href="#alarm-ringtone-enum"><span>Alarm ringtone (enum)</span></a></h3><p>Alarm ringtone. Value can be found in the published state on the <code>alarm_ringtone</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;alarm_ringtone&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;alarm_ringtone&quot;: NEW_VALUE}</code>. The possible values are: <code>tone_1</code>, <code>tone_2</code>, <code>tone_3</code>.</p>',11))])}]]),s=JSON.parse('{"path":"/devices/E13.html","title":"NOUS E13 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"NOUS E13 control via MQTT","description":"Integrate your NOUS E13 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-10-31T19:12:27.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/E13.md"}')}}]);