"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[31391],{42051:(e,o,t)=>{t.r(o),t.d(o,{comp:()=>c,data:()=>d});var a=t(60362);const i={},c=(0,t(60654).A)(i,[["render",function(e,o){const t=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[o[11]||(o[11]=(0,a.Lk)("h1",{id:"slacky-diy-airq-monitor-s01",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#slacky-diy-airq-monitor-s01"},[(0,a.Lk)("span",null,"Slacky-DIY AirQ_Monitor_S01")])],-1)),(0,a.Lk)("table",null,[o[6]||(o[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[o[2]||(o[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"AirQ_Monitor_S01")],-1)),(0,a.Lk)("tr",null,[o[1]||(o[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(t,{to:"/supported-devices/#v=Slacky-DIY"},{default:(0,a.k6)(()=>[...o[0]||(o[0]=[(0,a.eW)("Slacky-DIY",-1)])]),_:1})])]),o[3]||(o[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Air quality monitor")],-1)),o[4]||(o[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"co2, voc_index, temperature, humidity, pressure, illuminance, display_rotate, display_inversion, temperature_display_mode, temperature_offset, read_interval, enabling_co2_control, low_co2, high_co2, enabling_voc_control, low_voc, high_voc, switch_actions, brightness, enabling_sound, frc_co2_correction, features_sensors, life_time")],-1)),o[5]||(o[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/AirQ_Monitor_S01.png",alt:"Slacky-DIY AirQ_Monitor_S01"})])],-1))])]),o[12]||(o[12]=(0,a.Lk)("p",null,[(0,a.Lk)("a",{href:"https://github.com/slacky1965/air_quality_monitor_zrd",target:"_blank",rel:"noopener noreferrer"},"Original project description")],-1)),o[13]||(o[13]=(0,a.Lk)("h2",{id:"ota-updates",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#ota-updates"},[(0,a.Lk)("span",null,"OTA updates")])],-1)),(0,a.Lk)("p",null,[o[8]||(o[8]=(0,a.eW)("This device supports OTA updates, for more information see ",-1)),(0,a.bF)(t,{to:"/guide/usage/ota_updates.html"},{default:(0,a.k6)(()=>[...o[7]||(o[7]=[(0,a.eW)("OTA updates",-1)])]),_:1}),o[9]||(o[9]=(0,a.eW)(".",-1))]),o[14]||(o[14]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(t,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)(()=>[...o[10]||(o[10]=[(0,a.eW)("How to use device type specific configuration",-1)])]),_:1})])]),o[15]||(o[15]=(0,a.Fv)('<ul><li><p><code>co2_calibration</code>: Calibrates the co2 value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>temperature_calibration</code>: Calibrates the temperature value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>temperature_precision</code>: Number of digits after decimal point for temperature, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>humidity_calibration</code>: Calibrates the humidity value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>humidity_precision</code>: Number of digits after decimal point for humidity, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>pressure_calibration</code>: Calibrates the pressure value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>pressure_precision</code>: Number of digits after decimal point for pressure, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>illuminance_calibration</code>: Calibrates the illuminance value (percentual offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>illuminance_raw</code>: Expose the raw illuminance value. The value must be <code>true</code> or <code>false</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="co2-numeric" tabindex="-1"><a class="header-anchor" href="#co2-numeric"><span>CO2 (numeric)</span></a></h3><p>Measured value. Value can be found in the published state on the <code>co2</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;co2&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>ppm</code>.</p><h3 id="voc-index-numeric" tabindex="-1"><a class="header-anchor" href="#voc-index-numeric"><span>Voc index (numeric)</span></a></h3><p>VOC index. Value can be found in the published state on the <code>voc_index</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;voc_index&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>VOC Index points</code>.</p><h3 id="temperature-numeric" tabindex="-1"><a class="header-anchor" href="#temperature-numeric"><span>Temperature (numeric)</span></a></h3><p>Measured temperature value. Value can be found in the published state on the <code>temperature</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;temperature&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>Â°C</code>.</p><h3 id="humidity-numeric" tabindex="-1"><a class="header-anchor" href="#humidity-numeric"><span>Humidity (numeric)</span></a></h3><p>Measured relative humidity. Value can be found in the published state on the <code>humidity</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;humidity&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>%</code>.</p><h3 id="pressure-numeric" tabindex="-1"><a class="header-anchor" href="#pressure-numeric"><span>Pressure (numeric)</span></a></h3><p>The measured atmospheric pressure. Value can be found in the published state on the <code>pressure</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;pressure&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>kPa</code>.</p><h3 id="illuminance-numeric" tabindex="-1"><a class="header-anchor" href="#illuminance-numeric"><span>Illuminance (numeric)</span></a></h3><p>Measured illuminance. Value can be found in the published state on the <code>illuminance</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;illuminance&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>lx</code>.</p><h3 id="display-rotate-enum" tabindex="-1"><a class="header-anchor" href="#display-rotate-enum"><span>Display rotate (enum)</span></a></h3><p>Display orientation (horizontal/vertical). Value can be found in the published state on the <code>display_rotate</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;display_rotate&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;display_rotate&quot;: NEW_VALUE}</code>. The possible values are: <code>horizontal</code>, <code>vertical</code>.</p><h3 id="display-inversion-enum" tabindex="-1"><a class="header-anchor" href="#display-inversion-enum"><span>Display inversion (enum)</span></a></h3><p>Display inversion (black on white/white on black). Value can be found in the published state on the <code>display_inversion</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;display_inversion&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;display_inversion&quot;: NEW_VALUE}</code>. The possible values are: <code>black_on_white</code>, <code>white_on_black</code>.</p><h3 id="temperature-display-mode-enum" tabindex="-1"><a class="header-anchor" href="#temperature-display-mode-enum"><span>Temperature display mode (enum)</span></a></h3><p>The units of the temperature displayed on the device screen. Value can be found in the published state on the <code>temperature_display_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;temperature_display_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;temperature_display_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>celsius</code>, <code>fahrenheit</code>.</p><h3 id="temperature-offset-numeric" tabindex="-1"><a class="header-anchor" href="#temperature-offset-numeric"><span>Temperature offset (numeric)</span></a></h3><p>Offset to add/subtract to the inside temperature. Value can be found in the published state on the <code>temperature_offset</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;temperature_offset&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;temperature_offset&quot;: NEW_VALUE}</code>. The minimal value is <code>-5</code> and the maximum value is <code>5</code>. The unit of this value is <code>Â°C</code>.</p><h3 id="read-interval-numeric" tabindex="-1"><a class="header-anchor" href="#read-interval-numeric"><span>Read interval (numeric)</span></a></h3><p>Sensors reading period. Value can be found in the published state on the <code>read_interval</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;read_interval&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;read_interval&quot;: NEW_VALUE}</code>. The minimal value is <code>5</code> and the maximum value is <code>600</code>. The unit of this value is <code>Sec</code>.</p><h3 id="enabling-co2-control-binary" tabindex="-1"><a class="header-anchor" href="#enabling-co2-control-binary"><span>Enabling co2 control (binary)</span></a></h3><p>Enables/disables CO2 control. Value can be found in the published state on the <code>enabling_co2_control</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;enabling_co2_control&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;enabling_co2_control&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> enabling co2 control is ON, if <code>OFF</code> OFF.</p><h3 id="low-co2-numeric" tabindex="-1"><a class="header-anchor" href="#low-co2-numeric"><span>Low co2 (numeric)</span></a></h3><p>CO2 low turn-off limit. Value can be found in the published state on the <code>low_co2</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;low_co2&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;low_co2&quot;: NEW_VALUE}</code>. The minimal value is <code>400</code> and the maximum value is <code>2000</code>. The unit of this value is <code>ppm</code>.</p><h3 id="high-co2-numeric" tabindex="-1"><a class="header-anchor" href="#high-co2-numeric"><span>High co2 (numeric)</span></a></h3><p>CO2 high turn-on limit. Value can be found in the published state on the <code>high_co2</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;high_co2&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;high_co2&quot;: NEW_VALUE}</code>. The minimal value is <code>400</code> and the maximum value is <code>2000</code>. The unit of this value is <code>ppm</code>.</p><h3 id="enabling-voc-control-binary" tabindex="-1"><a class="header-anchor" href="#enabling-voc-control-binary"><span>Enabling voc control (binary)</span></a></h3><p>Enables/disables VOC control. Value can be found in the published state on the <code>enabling_voc_control</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;enabling_voc_control&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;enabling_voc_control&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> enabling voc control is ON, if <code>OFF</code> OFF.</p><h3 id="low-voc-numeric" tabindex="-1"><a class="header-anchor" href="#low-voc-numeric"><span>Low voc (numeric)</span></a></h3><p>VOC low turn-off limit. Value can be found in the published state on the <code>low_voc</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;low_voc&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;low_voc&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>500</code>. The unit of this value is <code>VOC index points</code>.</p><h3 id="high-voc-numeric" tabindex="-1"><a class="header-anchor" href="#high-voc-numeric"><span>High voc (numeric)</span></a></h3><p>VOC high turn-on limit. Value can be found in the published state on the <code>high_voc</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;high_voc&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;high_voc&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>500</code>. The unit of this value is <code>VOC index points</code>.</p><h3 id="switch-actions-enum" tabindex="-1"><a class="header-anchor" href="#switch-actions-enum"><span>Switch actions (enum)</span></a></h3><p>Actions switch. Value can be found in the published state on the <code>switch_actions</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;switch_actions&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;switch_actions&quot;: NEW_VALUE}</code>. The possible values are: <code>off</code>, <code>on</code>.</p><h3 id="brightness-numeric" tabindex="-1"><a class="header-anchor" href="#brightness-numeric"><span>Brightness (numeric)</span></a></h3><p>LED brightness. Value can be found in the published state on the <code>brightness</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;brightness&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;brightness&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>255</code>.</p><h3 id="enabling-sound-binary" tabindex="-1"><a class="header-anchor" href="#enabling-sound-binary"><span>Enabling sound (binary)</span></a></h3><p>Enables/disables sound. Value can be found in the published state on the <code>enabling_sound</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;enabling_sound&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;enabling_sound&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> enabling sound is ON, if <code>OFF</code> OFF.</p><h3 id="frc-co2-correction-numeric" tabindex="-1"><a class="header-anchor" href="#frc-co2-correction-numeric"><span>Frc co2 correction (numeric)</span></a></h3><p>FRC CO2 correction. Value can be found in the published state on the <code>frc_co2_correction</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;frc_co2_correction&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>ppm</code>.</p><h3 id="features-sensors-composite" tabindex="-1"><a class="header-anchor" href="#features-sensors-composite"><span>Features sensors (composite)</span></a></h3><p>Can be set by publishing to <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;features_sensors&quot;: {&quot;features&quot;: VALUE}}</code></p><ul><li><code>features</code> (enum) allowed values: <code>nothing</code>, <code>co2_forced_calibration</code>, <code>co2_factory_reset</code>, <code>bind_reset</code>, ``</li></ul><h3 id="life-time-numeric" tabindex="-1"><a class="header-anchor" href="#life-time-numeric"><span>Life time (numeric)</span></a></h3><p>Life time of device. Value can be found in the published state on the <code>life_time</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;life_time&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>h</code>.</p>',49))])}]]),d=JSON.parse('{"path":"/devices/AirQ_Monitor_S01.html","title":"Slacky-DIY AirQ_Monitor_S01 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Slacky-DIY AirQ_Monitor_S01 control via MQTT","description":"Integrate your Slacky-DIY AirQ_Monitor_S01 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-09-01T18:17:11.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/AirQ_Monitor_S01.md"}')}}]);