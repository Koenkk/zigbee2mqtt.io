"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[89067],{18691:(n,s,e)=>{e.r(s),e.d(s,{comp:()=>o,data:()=>i});var a=e(60362);const t={},o=(0,e(60654).A)(t,[["render",function(n,s){const e=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[s[23]||(s[23]=(0,a.Lk)("h1",{id:"ubisys-c4",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#ubisys-c4"},[(0,a.Lk)("span",null,"Ubisys C4")])],-1)),(0,a.Lk)("table",null,[s[6]||(s[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[s[2]||(s[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"C4")],-1)),(0,a.Lk)("tr",null,[s[1]||(s[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(e,{to:"/supported-devices/#v=Ubisys"},{default:(0,a.k6)(()=>[...s[0]||(s[0]=[(0,a.eW)("Ubisys",-1)])]),_:1})])]),s[3]||(s[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Control unit C4")],-1)),s[4]||(s[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"action")],-1)),s[5]||(s[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/C4.png",alt:"Ubisys C4"})])],-1))])]),s[24]||(s[24]=(0,a.Lk)("h2",{id:"notes",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#notes"},[(0,a.Lk)("span",null,"Notes")])],-1)),s[25]||(s[25]=(0,a.Lk)("h3",{id:"general",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#general"},[(0,a.Lk)("span",null,"General")])],-1)),(0,a.Lk)("p",null,[s[8]||(s[8]=(0,a.eW)('The ubisys C4 remote control unit seems to be primarily targeted to be directly bound to other Zigbee devices to control them. Therefore it does not emit plain "click" events or similar but can be configured to send Zigbee commands like on, off, toggle, cover up, cover down etc. from up to 6 endpoints (4 with on/off, level and scene clusters for lights and another 2 to control window covering devices). When used with Zigbee2MQTT all endpoints get bound to the coordinator automatically. Therefore all actions will be sent to the coordinator and forwarded to MQTT in addition to being sent directly via Zigbee to other devices that have potentially been bound manually (see ',-1)),(0,a.bF)(e,{to:"/guide/usage/binding.html"},{default:(0,a.k6)(()=>[...s[7]||(s[7]=[(0,a.eW)("Binding",-1)])]),_:1}),s[9]||(s[9]=(0,a.eW)(" for more information). In its factory reset configuration an ubisys C4 just sends a toggle command (originating from endpoints 1 to 4 respectively) for each input. Therefore basic keypresses on attached momentary switches can be processed through Zigbee2MQTT even without further input configuration.",-1))]),s[26]||(s[26]=(0,a.Fv)('<h3 id="configuring-inputs" tabindex="-1"><a class="header-anchor" href="#configuring-inputs"><span>Configuring Inputs</span></a></h3><p>The inputs of most ubisys devices can be configured in a very flexible way to map state transitions (e.g. &#39;released&#39; to &#39;pressed&#39;) to Zigbee commands (e.g. &#39;toggle&#39;). This even applies to the way in which these inputs control a local load (for ubisys devices other than the C4).</p><h4 id="templates" tabindex="-1"><a class="header-anchor" href="#templates"><span>Templates</span></a></h4><p>By publishing to <code>zigbee2mqtt/FRIENDLY_NAME/set</code> using the JSON properties <code>configure_device_setup</code> and <code>input_action_templates</code> the inputs can be configured using templates. This allows to configure some common use cases without having to fully dive into the details of <code>input_actions</code> (see <a href="#raw-configuration">Raw Configuration</a> below).</p><p>Valid template types are:</p><ul><li><code>toggle</code>: Use one push button input to toggle the state of a light (or a similar actuator). A &#39;toggle&#39; command will be sent on every push of the button.</li><li><code>toggle_switch</code>: Use one stationary switch to toggle. A &#39;toggle&#39; command will be sent when the switch is turned on as well as when the switch is turned off.</li><li><code>on_off_switch</code>: Use one stationary switch to turn on and off. An &#39;on&#39; command will be sent when the switch is turned on and an &#39;off&#39; command when it is turned off. Helpful to ensure that lights stay synchronised when controlling a group.</li><li><code>on</code>: Only send an &#39;on&#39; command on every push of a button. Helpful to e.g. use a C4 as a more direct interface to some other physical device with a relay, e.g. to turn on all lights when the (physical) alarm system signals an intrusion.</li><li><code>off</code>: Only send an &#39;off&#39; command on every push of a button (also see <code>on</code>).</li><li><code>dimmer_single</code>: Use one push button to toggle the state of a light and also to control its level. A short press will send a &#39;toggle&#39; command and long presses will move the level up and down alternately.</li><li><code>dimmer_double</code>: Use two push buttons to switch a light on and off and also to control its level. On the first input, a short press will send an &#39;on&#39; command and a long press a &#39;move level up&#39; command. On the second input, a short press will send an &#39;off&#39; command and a long press a &#39;move level down&#39; command.</li><li><code>cover</code>: Use two push buttons to control a cover. A press on the first input will send a &#39;move up&#39; command and if released within 1 second, it will send a &#39;stop&#39; command. The same applies for the second input with &#39;move down&#39; and &#39;stop&#39; commands. This allows to use short presses to e.g. control the tilt of lift &amp; tilt blinds whereas long presses will move up or down completely.</li><li><code>cover_switch</code>: Use two stationary switches to control a cover. Similar to <code>cover</code>, but the &#39;stop&#39; command will always be sent when a switch is turned off.</li><li><code>cover_up</code>: Only send a &#39;move up&#39; command on every push of a button (also see <code>on</code>).</li><li><code>cover_down</code>: Only send a &#39;move down&#39; command on every push of a button (also see <code>on</code>).</li><li><code>scene</code>: Use a push button to select a scene (using its id). A short press will send a &#39;recall scene&#39; command using <code>scene_id</code> and if <code>scene_id_2</code> is present a long press will do the same using <code>scene_id_2</code>.</li><li><code>scene_switch</code>: Use a stationary switch to select a scene. Very similar to <code>scene</code>: turning the switch on will send <code>scene_id</code> and turning it off will send <code>scene_id_2</code> (if configured).</li></ul><p>General attributes:</p><ul><li><code>input</code>: Optional, selects the input(s) to use for a template. If not specified, the first template will use input 0 and then it will be incremented automatically for every further template. In case a templates uses two inputs, <code>input</code> and <code>input+1</code> will be used and following template will use <code>input+2</code>.</li><li><code>inputs</code>: Optional, selects both inputs separately for templates using two inputs. Allows to e.g. switch up and down inputs in case they are wired differently. The following template will use <code>Math.max(...inputs)+1</code>.</li><li><code>endpoint</code>: Optional, selects the <em>outbound</em> endpoint to use for sending the commands. The C4 only contains <em>outbound</em> endpoints starting with endpoint 1 (see above). For the other ubisys devices endpoint 1 usually is an <em>inbound</em> endpoint controlling the load, but starting at 2 or 3 they also contain <em>outbound</em> endpoints that are per default bound to their respective load controlling endpoint but can also be changed (e.g. from switch to push button) or unbound and rebound to e.g. control a different light using the second input of a S1-R or D1. If not specified, the first template will use the first available <em>outbound</em> endpoint on the specific device and then it will be incremented automatically for every further template. For a C4, cover templates will start at endpoint 5 (since endpoints 1-4 do not host a window covering cluster and can therefore only be used for lights etc).</li></ul><p>The input(s) and endpoint used will also be output to the Zigbee2MQTT log (flagged as warnings but only to make sure they do not get suppressed).</p><p>Attributes only used with dimmer templates:</p><ul><li><code>no_onoff_down</code>: Optional, changes the commands sent to not automatically turn the light off when moving the level fully down. Useful to be able to dim a light down completely without turning it off.</li><li><code>no_onoff_up</code>: Optional, changes the commands sent to not automatically turn the light on when moving the level up.</li><li><code>no_onoff</code>: Optional, combination of <code>no_onoff_up</code> and <code>no_onoff_down</code>.</li><li><code>rate</code>: Optional (default is 50), specifies the rate in steps per second when moving the level up or down.</li></ul><p>Attributes only used with scene templates</p><ul><li><code>scene_id</code>: Mandatory, specifies the scene id to send for the primary function of the template (i.e. short button press or switch turned on).</li><li><code>group_id</code>: Specifies the group id to send the &#39;recall scene&#39; to (needs to be identical to the one used in the group definition in <code>configuration.yaml</code> / <code>groups</code> and to the one used when storing the scene. Can be omitted on subsequent scene templates.</li><li><code>scene_id_2</code>: Optional, if present it specifies the scene id to send for the secondary function of the template (i.e. long button press or switch turned off).</li><li><code>group_id_2</code>: Optional, specifies the group id to send with <code>scene_id_2</code>. Only needed if different from <code>group_id</code>.</li></ul><p><strong>On the C4, the respective <em>outbound</em> endpoint also needs to be bound to one or more target devices (see <a href="#binding">Binding</a> below) for most of the template types (besides scene control).</strong></p><p>Please also note that there seems to be a size limit on the amount of data that can successfully be written using <code>input_action_templates</code>, so not all combinations theoretically possible will work in reality.</p><h4 id="template-examples" tabindex="-1"><a class="header-anchor" href="#template-examples"><span>Template Examples</span></a></h4><p><code>&quot;//_comment&quot;</code> fields are really just comments only, will be ignored (as any other additional JSON properties) and can certainly be omitted. They are just used here since normal JavaScript comments (<code>//</code>) would not be considered valid JSON and therefore Zigbee2MQTT would throw an error.</p><p>C4 Default Configuration</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_action_templates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 0 and endpoint 1&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;toggle&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 1 and endpoint 2&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;toggle&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 2 and endpoint 3&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;toggle&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 4 and endpoint 4&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;toggle&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Control a dimming light with inputs 1 (up) and 0 (down) and use input 3 to toggle a different light</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_action_templates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use endpoint 1&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dimmer_double&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;inputs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use endpoint 2&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;toggle&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token number">3</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use separate up and down push buttons with a D1</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_action_templates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use inputs 0 and 1 and endpoint 2 (first outbound endpoint on a D1)&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dimmer_double&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use stationary switches instead of push buttons with a J1</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_action_templates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use inputs 0 and 1 and endpoint 2 (first outbound endpoint on a J1)&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cover_switch&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Control a dimming light with inputs 0 and 1 and recall scenes with 3 and 4</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_action_templates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use inputs 0 and 1 and endpoint 1&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dimmer_double&quot;</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 3 (endpoint does not really matter for scenes)&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scene&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;group_id&quot;</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;scene_id&quot;</span><span class="token operator">:</span> <span class="token number">10</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token property">&quot;//_comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;will automatically use input 4 and group id 1000&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scene&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                <span class="token property">&quot;scene_id&quot;</span><span class="token operator">:</span> <span class="token number">11</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="raw-configuration" tabindex="-1"><a class="header-anchor" href="#raw-configuration"><span>Raw Configuration</span></a></h4><p>By publishing to <code>zigbee2mqtt/FRIENDLY_NAME/set</code> the following device attributes can be set to rawly configure inputs:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token property">&quot;configure_device_setup&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token property">&quot;input_configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token property">&quot;input_actions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>\n<span class="line">            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>\n<span class="line">        <span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For further details on these attributes please take a look at the <a href="https://www.ubisys.de/wp-content/uploads/ubisys-c4-technical-reference.pdf" target="_blank" rel="noopener noreferrer">ubisys C4 Technical Reference Manual</a>, chapter &quot;7.8.5. Device Setup Cluster (Server)&quot; (or the respective ubisys reference manual of the device in use in case it&#39;s not a C4) and the &quot;Zigbee Device Physical Input Configurations Integrator&#39;s Guide&quot; (which can be obtained directly from ubisys upon request). Each element in the <code>input_configurations</code> and <code>input_actions</code> arrays corresponds to a single byte. Therefore, fields longer than one byte (e.g. the &quot;ClusterID&quot; field in <code>input_actions</code>) are represented by multiple elements in the array, and the arrays may vary in length depending on the configuration being sent.</p><p>Please note that there seems to be a size limit on the amount of data that can successfully be written to <code>input_actions</code>, so not all configurations theoretically possible might work in reality.</p><p>By publishing to <code>zigbee2mqtt/FRIENDLY_NAME/get/configure_device_setup</code> the values of the configuration attributes can also be read back from the device. If you don&#39;t want <code>configure_device_setup</code> to always show up in the published payload, you can prevent them from being cached by configuring <code>filtered_cache</code> for this device or all devices using the device options.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">devices</span><span class="token punctuation">:</span></span>\n<span class="line">  <span class="token key atrule">&#39;0x0000000000000000&#39;</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token key atrule">friendly_name</span><span class="token punctuation">:</span> <span class="token string">&#39;my_c4_controller&#39;</span></span>\n<span class="line">    <span class="token key atrule">filtered_cache</span><span class="token punctuation">:</span></span>\n<span class="line">      <span class="token punctuation">-</span> configure_device_setup</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binding" tabindex="-1"><a class="header-anchor" href="#binding"><span>Binding</span></a></h3><p>Most of the <code>input_actions</code> and <code>input_action_templates</code> (besides scene control) do not reference a target device directly but make use of the binding table of a specific <em>outbound</em> endpoint (for C4 see <a href="#general">General</a> above, for other ubisys devices take a look at the respective ubisys reference manual). For the C4, Zigbee2MQTT will always bind all endpoints to the coordinator automatically (so Zigbee2MQTT will be able to forward button presses to MQTT), but to control any other Zigbee device or group directly, it is necessary to bind the <em>outbound</em> endpoints used to the target (device or group).</p>',36)),(0,a.Lk)("p",null,[s[11]||(s[11]=(0,a.eW)("When binding (or unbinding), it is important to explicitly specify the ",-1)),s[12]||(s[12]=(0,a.Lk)("em",null,"outbound",-1)),s[13]||(s[13]=(0,a.eW)(" endpoint as the source, e.g. ",-1)),s[14]||(s[14]=(0,a.Lk)("code",null,"zigbee2mqtt/bridge/request/device/bind",-1)),s[15]||(s[15]=(0,a.eW)(" payload ",-1)),s[16]||(s[16]=(0,a.Lk)("code",null,'{"from": "SOURCE_DEVICE_FRIENDLY_NAME/2", "to": "TARGET"}',-1)),s[17]||(s[17]=(0,a.eW)(" (also see ",-1)),(0,a.bF)(e,{to:"/guide/usage/binding.html#binding-specific-endpoint"},{default:(0,a.k6)(()=>[...s[10]||(s[10]=[(0,a.eW)("Binding specific endpoint",-1)])]),_:1}),s[18]||(s[18]=(0,a.eW)("). Endpoints can be specified in numeric form and it is usually not necessary to specify an endpoint for the target device.",-1))]),s[27]||(s[27]=(0,a.Fv)('<p>For ubisys devices other than the C4 this also allows to use the secondary input to control a different device. Example: Use the secondary input on a D1 (uses <em>outbound</em> endpoint 3 in the factory configuration) to control a separate Zigbee bulb:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">mosquitto_pub -t zigbee2mqtt/bridge/request/device/bind -m &#39;{&quot;from&quot;: &quot;DIMMER_FRIENDLY_NAME/3&quot;, &quot;to&quot;: &quot;ANOTHER_BULB_FRIENDLY_NAME&quot;}&#39;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="decoupling" tabindex="-1"><a class="header-anchor" href="#decoupling"><span>Decoupling</span></a></h3><p>For ubisys devices other than the C4 this even allows to completely decouple the local input from the local output. Example: Unbind the switch input from the local load and use it to instead control a group of lights without cutting the power to the bulbs (the switch output can still be controlled via Zigbee, e.g. via MQTT through Zigbee2MQTT):</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">mosquitto_pub -t zigbee2mqtt/bridge/request/device/unbind -m &#39;{&quot;from&quot;: &quot;SWITCH_FRIENDLY_NAME/2&quot;, &quot;to&quot;: &quot;SWITCH_FRIENDLY_NAME&quot;}&#39;</span>\n<span class="line">mosquitto_pub -t zigbee2mqtt/bridge/request/device/bind -m &#39;{&quot;from&quot;: &quot;SWITCH_FRIENDLY_NAME/2&quot;, &quot;to&quot;: &quot;GROUP_NAME&quot;}&#39;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To restore the original behavior you unbind the group and rebind the device:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">mosquitto_pub -t zigbee2mqtt/bridge/request/device/unbind -m &#39;{&quot;from&quot;: &quot;SWITCH_FRIENDLY_NAME/2&quot;, &quot;to&quot;: &quot;GROUP_NAME&quot;}&#39;</span>\n<span class="line">mosquitto_pub -t zigbee2mqtt/bridge/request/device/bind -m &#39;{&quot;from&quot;: &quot;SWITCH_FRIENDLY_NAME/2&quot;, &quot;to&quot;: &quot;SWITCH_FRIENDLY_NAME&quot;}&#39;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ota-updates" tabindex="-1"><a class="header-anchor" href="#ota-updates"><span>OTA updates</span></a></h2>',8)),(0,a.Lk)("p",null,[s[20]||(s[20]=(0,a.eW)("This device supports OTA updates, for more information see ",-1)),(0,a.bF)(e,{to:"/guide/usage/ota_updates.html"},{default:(0,a.k6)(()=>[...s[19]||(s[19]=[(0,a.eW)("OTA updates",-1)])]),_:1}),s[21]||(s[21]=(0,a.eW)(".",-1))]),s[28]||(s[28]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(e,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)(()=>[...s[22]||(s[22]=[(0,a.eW)("How to use device type specific configuration",-1)])]),_:1})])]),s[29]||(s[29]=(0,a.Fv)('<ul><li><code>simulated_brightness</code>: Simulate a brightness value. If this device provides a brightness_move_up or brightness_move_down action it is possible to specify the update interval and delta. The action_brightness_delta indicates the delta for each interval. Example:</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">simulated_brightness</span><span class="token punctuation">:</span></span>\n<span class="line">  <span class="token key atrule">delta</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># delta per interval, default = 20</span></span>\n<span class="line">  <span class="token key atrule">interval</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment"># interval in milliseconds, default = 200</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="action-enum" tabindex="-1"><a class="header-anchor" href="#action-enum"><span>Action (enum)</span></a></h3><p>Triggered action (e.g. a button click). Value can be found in the published state on the <code>action</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>toggle_s1</code>, <code>toggle_s2</code>, <code>toggle_s3</code>, <code>toggle_s4</code>, <code>on_s1</code>, <code>on_s2</code>, <code>on_s3</code>, <code>on_s4</code>, <code>off_s1</code>, <code>off_s2</code>, <code>off_s3</code>, <code>off_s4</code>, <code>recall_*_s1</code>, <code>recal_*_s2</code>, <code>recall_*_s3</code>, <code>recal_*_s4</code>, <code>brightness_move_up_s1</code>, <code>brightness_move_up_s2</code>, <code>brightness_move_up_s3</code>, <code>brightness_move_up_s4</code>, <code>brightness_move_down_s1</code>, <code>brightness_move_down_s2</code>, <code>brightness_move_down_s3</code>, <code>brightness_move_down_s4</code>, <code>brightness_stop_s1</code>, <code>brightness_stop_s2</code>, <code>brightness_stop_s3</code>, <code>brightness_stop_s4</code>, <code>cover_open_s5</code>, <code>cover_close_s5</code>, <code>cover_stop_s5</code>, <code>cover_open_s6</code>, <code>cover_close_s6</code>, <code>cover_stop_s6</code>.</p>',5))])}]]),i=JSON.parse('{"path":"/devices/C4.html","title":"Ubisys C4 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Ubisys C4 control via MQTT","description":"Integrate your Ubisys C4 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2020-02-26T17:45:15.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/C4.md"}')}}]);