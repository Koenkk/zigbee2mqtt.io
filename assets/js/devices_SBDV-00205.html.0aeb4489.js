"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[52147],{30648:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>c,data:()=>d});var a=o(60362);const i={},c=(0,o(60654).A)(i,[["render",function(e,t){const o=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[t[11]||(t[11]=(0,a.Lk)("h1",{id:"sber-sbdv-00205",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#sber-sbdv-00205"},[(0,a.Lk)("span",null,"Sber SBDV-00205")])],-1)),(0,a.Lk)("table",null,[t[6]||(t[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[t[2]||(t[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"SBDV-00205")],-1)),(0,a.Lk)("tr",null,[t[1]||(t[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(o,{to:"/supported-devices/#v=Sber"},{default:(0,a.k6)(()=>[...t[0]||(t[0]=[(0,a.eW)("Sber",-1)])]),_:1})])]),t[3]||(t[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Smart Thermostat")],-1)),t[4]||(t[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"emergency_overcurrent, emergency_overheat, emergency_no_load, sensor_error_remote_disconnected, sensor_error_local_disconnected, sensor_error_short_circuit, status_heat_inefficient, status_antifrost, status_invalid_time, keypad_lockout, climate (occupied_heating_setpoint, local_temperature, system_mode, local_temperature_calibration, control_sequence_of_operation, running_mode, running_state), clear_weekly_schedule, programming_operation_mode, abs_min_heat_setpoint_limit, abs_max_heat_setpoint_limit, min_heat_setpoint_limit, max_heat_setpoint_limit, schedule, min_local_temperature_limit, max_local_temperature_limit, heating_hysteresis, device_temperature, temperature, voltage, current, power, upper_current_threshold, temperature_threshold, sensor_type, sensor_mode, remote_temperature, remote_temperature_calibration, remote_sensor_timeout, output_mode, brightness_operations_mode, brightness_steady_mode, identify, rtc_status, serial_number, resets_count, uptime, button_clicks_count_1, button_clicks_count_2, button_clicks_count_3, relay_switches_count_1")],-1)),t[5]||(t[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/SBDV-00205.png",alt:"Sber SBDV-00205"})])],-1))])]),t[12]||(t[12]=(0,a.Fv)('<h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h2><h3 id="pairing" tabindex="-1"><a class="header-anchor" href="#pairing"><span>Pairing</span></a></h3><p>To put the device in pairing mode, press all three buttons together for 5 seconds until &quot;no signal&quot; indicator starts breathing animation, then release buttons. When pairing process is completed, indicator will turn off.</p><h3 id="factory-reset" tabindex="-1"><a class="header-anchor" href="#factory-reset"><span>Factory reset</span></a></h3><p>To reset the device to factory settings, perform these steps. Press O button twice to enter menu. Select menu item F1 and press O button, number 0 will be displayed. Press + or - button to change number from 0 to 1, and confirm reset by pressing O button.</p><h2 id="ota-updates" tabindex="-1"><a class="header-anchor" href="#ota-updates"><span>OTA updates</span></a></h2>',6)),(0,a.Lk)("p",null,[t[8]||(t[8]=(0,a.eW)("This device supports OTA updates, for more information see ",-1)),(0,a.bF)(o,{to:"/guide/usage/ota_updates.html"},{default:(0,a.k6)(()=>[...t[7]||(t[7]=[(0,a.eW)("OTA updates",-1)])]),_:1}),t[9]||(t[9]=(0,a.eW)(".",-1))]),t[13]||(t[13]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(o,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)(()=>[...t[10]||(t[10]=[(0,a.eW)("How to use device type specific configuration",-1)])]),_:1})])]),t[14]||(t[14]=(0,a.Fv)('<ul><li><p><code>device_temperature_calibration</code>: Calibrates the device_temperature value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>temperature_calibration</code>: Calibrates the temperature value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>temperature_precision</code>: Number of digits after decimal point for temperature, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>voltage_calibration</code>: Calibrates the voltage value (percentual offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>voltage_precision</code>: Number of digits after decimal point for voltage, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>current_calibration</code>: Calibrates the current value (percentual offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>current_precision</code>: Number of digits after decimal point for current, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>power_calibration</code>: Calibrates the power value (percentual offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>power_precision</code>: Number of digits after decimal point for power, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li><li><p><code>thermostat_unit</code>: Controls the temperature unit of the thermostat (default celsius). The value must be one of <code>celsius</code>, <code>fahrenheit</code></p></li><li><p><code>identify_timeout</code>: Sets the duration of the identification procedure in seconds (i.e., how long the device would flash).The value ranges from 1 to 30 seconds (default: 3). The value must be a number with a minimum value of <code>1</code> and with a with a maximum value of <code>30</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="emergency-overcurrent-binary" tabindex="-1"><a class="header-anchor" href="#emergency-overcurrent-binary"><span>Emergency overcurrent (binary)</span></a></h3><p>Overcurrent alarm is triggered. Value can be found in the published state on the <code>emergency_overcurrent</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> emergency overcurrent is ON, if <code>false</code> OFF.</p><h3 id="emergency-overheat-binary" tabindex="-1"><a class="header-anchor" href="#emergency-overheat-binary"><span>Emergency overheat (binary)</span></a></h3><p>Overheat alarm is triggered. Value can be found in the published state on the <code>emergency_overheat</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> emergency overheat is ON, if <code>false</code> OFF.</p><h3 id="emergency-no-load-binary" tabindex="-1"><a class="header-anchor" href="#emergency-no-load-binary"><span>Emergency no load (binary)</span></a></h3><p>Load disconnection alarm is triggered. Value can be found in the published state on the <code>emergency_no_load</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> emergency no load is ON, if <code>false</code> OFF.</p><h3 id="sensor-error-remote-disconnected-binary" tabindex="-1"><a class="header-anchor" href="#sensor-error-remote-disconnected-binary"><span>Sensor error remote disconnected (binary)</span></a></h3><p>Wireless sensor disconnected. Value can be found in the published state on the <code>sensor_error_remote_disconnected</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> sensor error remote disconnected is ON, if <code>false</code> OFF.</p><h3 id="sensor-error-local-disconnected-binary" tabindex="-1"><a class="header-anchor" href="#sensor-error-local-disconnected-binary"><span>Sensor error local disconnected (binary)</span></a></h3><p>Wired sensor disconnected. Value can be found in the published state on the <code>sensor_error_local_disconnected</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> sensor error local disconnected is ON, if <code>false</code> OFF.</p><h3 id="sensor-error-short-circuit-binary" tabindex="-1"><a class="header-anchor" href="#sensor-error-short-circuit-binary"><span>Sensor error short circuit (binary)</span></a></h3><p>Wired sensor short circuit. Value can be found in the published state on the <code>sensor_error_short_circuit</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> sensor error short circuit is ON, if <code>false</code> OFF.</p><h3 id="status-heat-inefficient-binary" tabindex="-1"><a class="header-anchor" href="#status-heat-inefficient-binary"><span>Status heat inefficient (binary)</span></a></h3><p>Heating is inefficient. Value can be found in the published state on the <code>status_heat_inefficient</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> status heat inefficient is ON, if <code>false</code> OFF.</p><h3 id="status-antifrost-binary" tabindex="-1"><a class="header-anchor" href="#status-antifrost-binary"><span>Status antifrost (binary)</span></a></h3><p>Antifrost mode. Value can be found in the published state on the <code>status_antifrost</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> status antifrost is ON, if <code>false</code> OFF.</p><h3 id="status-invalid-time-binary" tabindex="-1"><a class="header-anchor" href="#status-invalid-time-binary"><span>Status invalid time (binary)</span></a></h3><p>Time information is not valid, schedule is not functioning. Value can be found in the published state on the <code>status_invalid_time</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> status invalid time is ON, if <code>false</code> OFF.</p><h3 id="keypad-lockout-enum" tabindex="-1"><a class="header-anchor" href="#keypad-lockout-enum"><span>Keypad lockout (enum)</span></a></h3><p>Enables/disables physical input on the device. Value can be found in the published state on the <code>keypad_lockout</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;keypad_lockout&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;keypad_lockout&quot;: NEW_VALUE}</code>. The possible values are: <code>unlock</code>, <code>lock1</code>.</p><h3 id="climate" tabindex="-1"><a class="header-anchor" href="#climate"><span>Climate</span></a></h3><p>This climate device supports the following features: <code>occupied_heating_setpoint</code>, <code>local_temperature</code>, <code>system_mode</code>, <code>local_temperature_calibration</code>, <code>control_sequence_of_operation</code>, <code>running_mode</code>, <code>running_state</code>.</p><ul><li><code>occupied_heating_setpoint</code>: Temperature setpoint. To control publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;occupied_heating_setpoint&quot;: VALUE}</code> where <code>VALUE</code> is the °C between <code>1</code> and <code>50</code>. To read send a message to <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;occupied_heating_setpoint&quot;: &quot;&quot;}</code>.</li><li><code>local_temperature</code>: Current temperature value used by thermostat (in °C). To read send a message to <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;local_temperature&quot;: &quot;&quot;}</code>.</li><li><code>system_mode</code>: Mode of this device. To control publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;system_mode&quot;: VALUE}</code> where <code>VALUE</code> is one of: <code>heat</code>, <code>off</code>, <code>sleep</code>. To read send a message to <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;system_mode&quot;: &quot;&quot;}</code>.</li><li><code>running_state</code>: The current running state. Possible values are: <code>idle</code>, <code>heat</code>. To read send a message to <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;running_state&quot;: &quot;&quot;}</code>.</li><li><code>local_temperature_calibration</code>: Offset to add/subtract to the local temperature. To control publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;local_temperature_calibration&quot;: VALUE}.</code>To read send a message to <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;local_temperature&quot;: &quot;&quot;}</code>.The minimal value is <code>-12.8</code> and the maximum value is <code>12.7</code> with a step size of <code>0.1</code>.</li></ul><h3 id="clear-weekly-schedule-enum" tabindex="-1"><a class="header-anchor" href="#clear-weekly-schedule-enum"><span>Clear weekly schedule (enum)</span></a></h3><p>Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;clear_weekly_schedule&quot;: NEW_VALUE}</code>. The possible values are: <code>Clear</code>.</p><h3 id="programming-operation-mode-enum" tabindex="-1"><a class="header-anchor" href="#programming-operation-mode-enum"><span>Programming operation mode (enum)</span></a></h3><p>Controls how programming affects the thermostat. Possible values: setpoint (only use specified setpoint), schedule (follow programmed setpoint schedule). Value can be found in the published state on the <code>programming_operation_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;programming_operation_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;programming_operation_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>setpoint</code>, <code>schedule</code>.</p><h3 id="abs-min-heat-setpoint-limit-numeric" tabindex="-1"><a class="header-anchor" href="#abs-min-heat-setpoint-limit-numeric"><span>Abs min heat setpoint limit (numeric)</span></a></h3><p>Absolute min temperature allowed on the device. Value can be found in the published state on the <code>abs_min_heat_setpoint_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;abs_min_heat_setpoint_limit&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>°C</code>.</p><h3 id="abs-max-heat-setpoint-limit-numeric" tabindex="-1"><a class="header-anchor" href="#abs-max-heat-setpoint-limit-numeric"><span>Abs max heat setpoint limit (numeric)</span></a></h3><p>Absolute max temperature allowed on the device. Value can be found in the published state on the <code>abs_max_heat_setpoint_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;abs_max_heat_setpoint_limit&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>°C</code>.</p><h3 id="min-heat-setpoint-limit-numeric" tabindex="-1"><a class="header-anchor" href="#min-heat-setpoint-limit-numeric"><span>Min heat setpoint limit (numeric)</span></a></h3><p>Minimum Heating set point limit. Value can be found in the published state on the <code>min_heat_setpoint_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;min_heat_setpoint_limit&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;min_heat_setpoint_limit&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>35</code>. The unit of this value is <code>°C</code>.</p><h3 id="max-heat-setpoint-limit-numeric" tabindex="-1"><a class="header-anchor" href="#max-heat-setpoint-limit-numeric"><span>Max heat setpoint limit (numeric)</span></a></h3><p>Maximum Heating set point limit. Value can be found in the published state on the <code>max_heat_setpoint_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;max_heat_setpoint_limit&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;max_heat_setpoint_limit&quot;: NEW_VALUE}</code>. The minimal value is <code>5</code> and the maximum value is <code>50</code>. The unit of this value is <code>°C</code>.</p><h3 id="schedule-composite" tabindex="-1"><a class="header-anchor" href="#schedule-composite"><span>Schedule (composite)</span></a></h3><p>The heating schedule to use when the operation mode is set to &#39;schedule&#39;. Up to 10 transitions can be defined per day, where a transition is expressed in the format &#39;HH:mm/temperature&#39;, each separated by a space. The valid temperature range is 1-50°C.. Can be set by publishing to <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;weekly_schedule&quot;: {&quot;sunday&quot;: VALUE, &quot;monday&quot;: VALUE, &quot;tuesday&quot;: VALUE, &quot;wednesday&quot;: VALUE, &quot;thursday&quot;: VALUE, &quot;friday&quot;: VALUE, &quot;saturday&quot;: VALUE}}</code> To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;weekly_schedule&quot;: &quot;&quot;}</code>.</p><ul><li><code>sunday</code> (text)</li><li><code>monday</code> (text)</li><li><code>tuesday</code> (text)</li><li><code>wednesday</code> (text)</li><li><code>thursday</code> (text)</li><li><code>friday</code> (text)</li><li><code>saturday</code> (text)</li></ul><h3 id="min-local-temperature-limit-numeric" tabindex="-1"><a class="header-anchor" href="#min-local-temperature-limit-numeric"><span>Min local temperature limit (numeric)</span></a></h3><p>Min Local Temperature Threshold. Value can be found in the published state on the <code>min_local_temperature_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;min_local_temperature_limit&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;min_local_temperature_limit&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>35</code>. The unit of this value is <code>°C</code>.</p><h3 id="max-local-temperature-limit-numeric" tabindex="-1"><a class="header-anchor" href="#max-local-temperature-limit-numeric"><span>Max local temperature limit (numeric)</span></a></h3><p>Max Local Temperature Threshold. Value can be found in the published state on the <code>max_local_temperature_limit</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;max_local_temperature_limit&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;max_local_temperature_limit&quot;: NEW_VALUE}</code>. The minimal value is <code>5</code> and the maximum value is <code>50</code>. The unit of this value is <code>°C</code>.</p><h3 id="heating-hysteresis-numeric" tabindex="-1"><a class="header-anchor" href="#heating-hysteresis-numeric"><span>Heating hysteresis (numeric)</span></a></h3><p>Heating hysteresis. Value can be found in the published state on the <code>heating_hysteresis</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;heating_hysteresis&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;heating_hysteresis&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>10</code>. The unit of this value is <code>°C</code>.</p><h3 id="device-temperature-numeric" tabindex="-1"><a class="header-anchor" href="#device-temperature-numeric"><span>Device temperature (numeric)</span></a></h3><p>Temperature of the device. Value can be found in the published state on the <code>device_temperature</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;device_temperature&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>°C</code>.</p><h3 id="sensor-temperature-wired-numeric" tabindex="-1"><a class="header-anchor" href="#sensor-temperature-wired-numeric"><span>Sensor Temperature (Wired) (numeric)</span></a></h3><p>Temperature from wired NTC sensor. Value can be found in the published state on the <code>temperature</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;temperature&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>°C</code>.</p><h3 id="voltage-numeric" tabindex="-1"><a class="header-anchor" href="#voltage-numeric"><span>Voltage (numeric)</span></a></h3><p>Measured electrical potential value. Value can be found in the published state on the <code>voltage</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;voltage&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>V</code>.</p><h3 id="current-numeric" tabindex="-1"><a class="header-anchor" href="#current-numeric"><span>Current (numeric)</span></a></h3><p>Instantaneous measured electrical current. Value can be found in the published state on the <code>current</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;current&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>A</code>.</p><h3 id="power-numeric" tabindex="-1"><a class="header-anchor" href="#power-numeric"><span>Power (numeric)</span></a></h3><p>Instantaneous measured power. Value can be found in the published state on the <code>power</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;power&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>W</code>.</p><h3 id="upper-current-threshold-numeric" tabindex="-1"><a class="header-anchor" href="#upper-current-threshold-numeric"><span>Upper current threshold (numeric)</span></a></h3><p>Upper current threshold. Value can be found in the published state on the <code>upper_current_threshold</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;upper_current_threshold&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;upper_current_threshold&quot;: NEW_VALUE}</code>. The minimal value is <code>100</code> and the maximum value is <code>16000</code>. The unit of this value is <code>mA</code>.</p><h3 id="temperature-threshold-numeric" tabindex="-1"><a class="header-anchor" href="#temperature-threshold-numeric"><span>Temperature threshold (numeric)</span></a></h3><p>Overtemperature threshold (use with caution). Value can be found in the published state on the <code>temperature_threshold</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;temperature_threshold&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;temperature_threshold&quot;: NEW_VALUE}</code>. The minimal value is <code>-200</code> and the maximum value is <code>200</code>. The unit of this value is <code>°C</code>.</p><h3 id="sensor-type-enum" tabindex="-1"><a class="header-anchor" href="#sensor-type-enum"><span>Sensor type (enum)</span></a></h3><p>Resistance of NTC sensor, default is 10 kOhm. Value can be found in the published state on the <code>sensor_type</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;sensor_type&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;sensor_type&quot;: NEW_VALUE}</code>. The possible values are: <code>4p7K</code>, <code>6p8K</code>, <code>10K</code>, <code>12K</code>, <code>15K</code>, <code>33K</code>, <code>47K</code>.</p><h3 id="sensor-mode-enum" tabindex="-1"><a class="header-anchor" href="#sensor-mode-enum"><span>Sensor mode (enum)</span></a></h3><p>Sensor mode selects active temperature sensor: local (wired), remote (wireless), or combined logic which uses both sensors. Value can be found in the published state on the <code>sensor_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;sensor_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;sensor_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>local</code>, <code>remote</code>, <code>both</code>.</p><h3 id="remote-temperature-numeric" tabindex="-1"><a class="header-anchor" href="#remote-temperature-numeric"><span>Remote temperature (numeric)</span></a></h3><p>Remote Temperature. Value can be found in the published state on the <code>remote_temperature</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;remote_temperature&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;remote_temperature&quot;: NEW_VALUE}</code>. The minimal value is <code>-273.15</code> and the maximum value is <code>327.67</code>. The unit of this value is <code>°C</code>.</p><h3 id="remote-temperature-calibration-numeric" tabindex="-1"><a class="header-anchor" href="#remote-temperature-calibration-numeric"><span>Remote temperature calibration (numeric)</span></a></h3><p>Remote Temperature Calibration. Value can be found in the published state on the <code>remote_temperature_calibration</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;remote_temperature_calibration&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;remote_temperature_calibration&quot;: NEW_VALUE}</code>. The minimal value is <code>-12.8</code> and the maximum value is <code>12.7</code>. The unit of this value is <code>°C</code>.</p><h3 id="remote-sensor-timeout-numeric" tabindex="-1"><a class="header-anchor" href="#remote-sensor-timeout-numeric"><span>Remote sensor timeout (numeric)</span></a></h3><p>Timeout of remote temperature sensor (in seconds). Value can be found in the published state on the <code>remote_sensor_timeout</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;remote_sensor_timeout&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;remote_sensor_timeout&quot;: NEW_VALUE}</code>. The minimal value is <code>1</code> and the maximum value is <code>65535</code>.</p><h3 id="output-mode-enum" tabindex="-1"><a class="header-anchor" href="#output-mode-enum"><span>Output mode (enum)</span></a></h3><p>Output mode: normal or inverted logic of relay. Value can be found in the published state on the <code>output_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;output_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;output_mode&quot;: NEW_VALUE}</code>. The possible values are: <code>normal</code>, <code>inverted</code>.</p><h3 id="brightness-operations-mode-numeric" tabindex="-1"><a class="header-anchor" href="#brightness-operations-mode-numeric"><span>Brightness operations mode (numeric)</span></a></h3><p>Brightness (active mode). Value can be found in the published state on the <code>brightness_operations_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;brightness_operations_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;brightness_operations_mode&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>1000</code>.</p><h3 id="brightness-steady-mode-numeric" tabindex="-1"><a class="header-anchor" href="#brightness-steady-mode-numeric"><span>Brightness steady mode (numeric)</span></a></h3><p>Brightness (steady mode). Value can be found in the published state on the <code>brightness_steady_mode</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;brightness_steady_mode&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;brightness_steady_mode&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>1000</code>.</p><h3 id="identify-enum" tabindex="-1"><a class="header-anchor" href="#identify-enum"><span>Identify (enum)</span></a></h3><p>Initiate device identification. Value will <strong>not</strong> be published in the state. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;identify&quot;: NEW_VALUE}</code>. The possible values are: <code>identify</code>.</p><h3 id="rtc-status-list" tabindex="-1"><a class="header-anchor" href="#rtc-status-list"><span>Rtc status (list)</span></a></h3><p>List of active RTC warnings. Can be set by publishing to <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;rtc_status&quot;: [{&quot;unavailable&quot;: VALUE, &quot;data_not_vaild&quot;: VALUE}]}</code></p><ul><li><code>unavailable</code> (binary): RTC hardware in unavailable allowed values: <code>true</code> or <code>false</code></li><li><code>data_not_vaild</code> (binary): RTC data is not valid allowed values: <code>true</code> or <code>false</code></li></ul><h3 id="serial-number-text" tabindex="-1"><a class="header-anchor" href="#serial-number-text"><span>Serial Number (text)</span></a></h3><p>Value can be found in the published state on the <code>serial_number</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;serial_number&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p><h3 id="resets-count-numeric" tabindex="-1"><a class="header-anchor" href="#resets-count-numeric"><span>Resets count (numeric)</span></a></h3><p>(telemetry) Number of resets. Value can be found in the published state on the <code>resets_count</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;resets_count&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p><h3 id="uptime-numeric" tabindex="-1"><a class="header-anchor" href="#uptime-numeric"><span>Uptime (numeric)</span></a></h3><p>(telemetry) Device uptime, in seconds. Value can be found in the published state on the <code>uptime</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;uptime&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>s</code>.</p><h3 id="button-clicks-count-1-numeric" tabindex="-1"><a class="header-anchor" href="#button-clicks-count-1-numeric"><span>Button clicks count 1 (numeric)</span></a></h3><p>(telemetry) Total clicks count of button 1. Value can be found in the published state on the <code>button_clicks_count_1</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;button_clicks_count_1&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p><h3 id="button-clicks-count-2-numeric" tabindex="-1"><a class="header-anchor" href="#button-clicks-count-2-numeric"><span>Button clicks count 2 (numeric)</span></a></h3><p>(telemetry) Total clicks count of button 2. Value can be found in the published state on the <code>button_clicks_count_2</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;button_clicks_count_2&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p><h3 id="button-clicks-count-3-numeric" tabindex="-1"><a class="header-anchor" href="#button-clicks-count-3-numeric"><span>Button clicks count 3 (numeric)</span></a></h3><p>(telemetry) Total clicks count of button 3. Value can be found in the published state on the <code>button_clicks_count_3</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;button_clicks_count_3&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p><h3 id="relay-switches-count-1-numeric" tabindex="-1"><a class="header-anchor" href="#relay-switches-count-1-numeric"><span>Relay switches count 1 (numeric)</span></a></h3><p>(telemetry) Total toggle count of relay 1. Value can be found in the published state on the <code>relay_switches_count_1</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;relay_switches_count_1&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value.</p>',95))])}]]),d=JSON.parse('{"path":"/devices/SBDV-00205.html","title":"Sber SBDV-00205 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Sber SBDV-00205 control via MQTT","description":"Integrate your Sber SBDV-00205 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-09-30T19:35:14.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/SBDV-00205.md"}')}}]);