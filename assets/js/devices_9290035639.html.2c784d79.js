"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[94e3],{453:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>n,data:()=>s});var o=a(60362);const i={},n=(0,a(60654).A)(i,[["render",function(e,t){const a=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[t[7]||(t[7]=(0,o.Lk)("h1",{id:"philips-9290035639",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#philips-9290035639"},[(0,o.Lk)("span",null,"Philips 9290035639")])],-1)),(0,o.Lk)("table",null,[t[6]||(t[6]=(0,o.Lk)("thead",null,[(0,o.Lk)("tr",null,[(0,o.Lk)("th"),(0,o.Lk)("th")])],-1)),(0,o.Lk)("tbody",null,[t[2]||(t[2]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Model"),(0,o.Lk)("td",null,"9290035639")],-1)),(0,o.Lk)("tr",null,[t[1]||(t[1]=(0,o.Lk)("td",null,"Vendor",-1)),(0,o.Lk)("td",null,[(0,o.bF)(a,{to:"/supported-devices/#v=Philips"},{default:(0,o.k6)(()=>[...t[0]||(t[0]=[(0,o.eW)("Philips",-1)])]),_:1})])]),t[3]||(t[3]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Description"),(0,o.Lk)("td",null,"Hue Secure contact sensor")],-1)),t[4]||(t[4]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Exposes"),(0,o.Lk)("td",null,"contact, tamper, contact_last_changed, tamper_last_changed, battery")],-1)),t[5]||(t[5]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Picture"),(0,o.Lk)("td",null,[(0,o.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/9290035639.png",alt:"Philips 9290035639"})])],-1))])]),t[8]||(t[8]=(0,o.Fv)('<h2 id="pairing" tabindex="-1"><a class="header-anchor" href="#pairing"><span>Pairing</span></a></h2><p>To initiate setup mode, press and hold the setup button on the rear of the device for +- 5 seconds until the setup light blinks red/green. It is now in pairing mode release the button. When paired, the light blinks orange (indicating tamper is triggered)</p><p>As with many HUE products pairing it to a HUE hub again and then removing it again also set&#39;s the device back to a initial pairing mode similar to a factory reset</p><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="contact-binary" tabindex="-1"><a class="header-anchor" href="#contact-binary"><span>Contact (binary)</span></a></h3><p>Indicates if the contact is closed (= true) or open (= false). Value can be found in the published state on the <code>contact</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;contact&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. If value equals <code>false</code> contact is ON, if <code>true</code> OFF.</p><h3 id="tamper-binary" tabindex="-1"><a class="header-anchor" href="#tamper-binary"><span>Tamper (binary)</span></a></h3><p>Indicates whether the device is tampered. Value can be found in the published state on the <code>tamper</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;tamper&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. If value equals <code>true</code> tamper is ON, if <code>false</code> OFF.</p><h3 id="contact-last-changed-numeric" tabindex="-1"><a class="header-anchor" href="#contact-last-changed-numeric"><span>Contact last changed (numeric)</span></a></h3><p>Time (in seconds) since when contact was last changed.. Value can be found in the published state on the <code>contact_last_changed</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;contact_last_changed&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>s</code>.</p><h3 id="tamper-last-changed-numeric" tabindex="-1"><a class="header-anchor" href="#tamper-last-changed-numeric"><span>Tamper last changed (numeric)</span></a></h3><p>Time (in seconds) since when tamper was last changed.. Value can be found in the published state on the <code>tamper_last_changed</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;tamper_last_changed&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>s</code>.</p><h3 id="battery-numeric" tabindex="-1"><a class="header-anchor" href="#battery-numeric"><span>Battery (numeric)</span></a></h3><p>Remaining battery in %. Value can be found in the published state on the <code>battery</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;battery&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p>',14))])}]]),s=JSON.parse('{"path":"/devices/9290035639.html","title":"Philips 9290035639 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Philips 9290035639 control via MQTT","description":"Integrate your Philips 9290035639 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2023-09-28T10:54:36.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/9290035639.md"}')}}]);