"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[66618],{81901:(e,a,t)=>{t.r(a),t.d(a,{comp:()=>d,data:()=>s});var o=t(60362);const n={},d=(0,t(60654).A)(n,[["render",function(e,a){const t=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[a[7]||(a[7]=(0,o.Lk)("h1",{id:"spacetronik-zb-dg03",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#spacetronik-zb-dg03"},[(0,o.Lk)("span",null,"Spacetronik ZB-DG03")])],-1)),(0,o.Lk)("table",null,[a[6]||(a[6]=(0,o.Lk)("thead",null,[(0,o.Lk)("tr",null,[(0,o.Lk)("th"),(0,o.Lk)("th")])],-1)),(0,o.Lk)("tbody",null,[a[2]||(a[2]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Model"),(0,o.Lk)("td",null,"ZB-DG03")],-1)),(0,o.Lk)("tr",null,[a[1]||(a[1]=(0,o.Lk)("td",null,"Vendor",-1)),(0,o.Lk)("td",null,[(0,o.bF)(t,{to:"/supported-devices/#v=Spacetronik"},{default:(0,o.k6)(()=>[...a[0]||(a[0]=[(0,o.eW)("Spacetronik",-1)])]),_:1})])]),a[3]||(a[3]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Description"),(0,o.Lk)("td",null,"LPG gas sensor")],-1)),a[4]||(a[4]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Exposes"),(0,o.Lk)("td",null,"gas, preheat, fault, lifecycle")],-1)),a[5]||(a[5]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Picture"),(0,o.Lk)("td",null,[(0,o.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/ZB-DG03.png",alt:"Spacetronik ZB-DG03"})])],-1))])]),a[8]||(a[8]=(0,o.Fv)('<h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="gas-binary" tabindex="-1"><a class="header-anchor" href="#gas-binary"><span>Gas (binary)</span></a></h3><p>Indicates whether the device detected gas. Value can be found in the published state on the <code>gas</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> gas is ON, if <code>false</code> OFF.</p><h3 id="preheat-binary" tabindex="-1"><a class="header-anchor" href="#preheat-binary"><span>Preheat (binary)</span></a></h3><p>Sensor preheat active. Value can be found in the published state on the <code>preheat</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> preheat is ON, if <code>false</code> OFF.</p><h3 id="fault-enum" tabindex="-1"><a class="header-anchor" href="#fault-enum"><span>Fault (enum)</span></a></h3><p>Fault status of the device (none = no fault). Value can be found in the published state on the <code>fault</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>none</code>, <code>fault</code>, <code>serious_fault</code>, <code>sensor_fault</code>, <code>probe_fault</code>, <code>power_fault</code>.</p><h3 id="lifecycle-binary" tabindex="-1"><a class="header-anchor" href="#lifecycle-binary"><span>Lifecycle (binary)</span></a></h3><p>Sensor lifetime limit. Value can be found in the published state on the <code>lifecycle</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>true</code> lifecycle is ON, if <code>false</code> OFF.</p>',9))])}]]),s=JSON.parse('{"path":"/devices/ZB-DG03.html","title":"Spacetronik ZB-DG03 control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Spacetronik ZB-DG03 control via MQTT","description":"Integrate your Spacetronik ZB-DG03 via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-10-31T19:12:27.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/ZB-DG03.md"}')}}]);