"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[30392],{68840:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>r,data:()=>c});var o=a(60362);const i={},r=(0,a(60654).A)(i,[["render",function(e,t){const a=(0,o.g2)("RouteLink");return(0,o.uX)(),(0,o.CE)("div",null,[t[8]||(t[8]=(0,o.Lk)("h1",{id:"bacchus-bacchus-water-level-meter",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#bacchus-bacchus-water-level-meter"},[(0,o.Lk)("span",null,"Bacchus Bacchus Water level meter")])],-1)),(0,o.Lk)("table",null,[t[6]||(t[6]=(0,o.Lk)("thead",null,[(0,o.Lk)("tr",null,[(0,o.Lk)("th"),(0,o.Lk)("th")])],-1)),(0,o.Lk)("tbody",null,[t[2]||(t[2]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Model"),(0,o.Lk)("td",null,"Bacchus Water level meter")],-1)),(0,o.Lk)("tr",null,[t[1]||(t[1]=(0,o.Lk)("td",null,"Vendor",-1)),(0,o.Lk)("td",null,[(0,o.bF)(a,{to:"/supported-devices/#v=Bacchus"},{default:(0,o.k6)(()=>[...t[0]||(t[0]=[(0,o.eW)("Bacchus",-1)])]),_:1})])]),t[3]||(t[3]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Description"),(0,o.Lk)("td",null,"Bacchus tank water level sensor")],-1)),t[4]||(t[4]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Exposes"),(0,o.Lk)("td",null,"water_level, out_of_service, filling, temperature, tank_height, alarm_min_threshold, alarm_max_threshold, invert_threshold, measurment_period, battery, voltage")],-1)),t[5]||(t[5]=(0,o.Lk)("tr",null,[(0,o.Lk)("td",null,"Picture"),(0,o.Lk)("td",null,[(0,o.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/Bacchus-Water-level-meter.png",alt:"Bacchus Bacchus Water level meter"})])],-1))])]),t[9]||(t[9]=(0,o.Lk)("p",null,[(0,o.Lk)("a",{href:"https://github.com/Bacchus777/Water_level_meter",target:"_blank",rel:"noopener noreferrer"},"Original project description")],-1)),t[10]||(t[10]=(0,o.Lk)("h2",{id:"options",tabindex:"-1"},[(0,o.Lk)("a",{class:"header-anchor",href:"#options"},[(0,o.Lk)("span",null,"Options")])],-1)),(0,o.Lk)("p",null,[(0,o.Lk)("em",null,[(0,o.bF)(a,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,o.k6)(()=>[...t[7]||(t[7]=[(0,o.eW)("How to use device type specific configuration",-1)])]),_:1})])]),t[11]||(t[11]=(0,o.Fv)('<ul><li><p><code>temperature_calibration</code>: Calibrates the temperature value (absolute offset), takes into effect on next report of device. The value must be a number.</p></li><li><p><code>temperature_precision</code>: Number of digits after decimal point for temperature, takes into effect on next report of device. This option can only decrease the precision, not increase it. The value must be a number with a minimum value of <code>0</code> and with a with a maximum value of <code>3</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="water-level-numeric" tabindex="-1"><a class="header-anchor" href="#water-level-numeric"><span>Water level (numeric)</span></a></h3><p>Current water level in cm. Value can be found in the published state on the <code>water_level</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The unit of this value is <code>cm</code>.</p><h3 id="out-of-service-binary" tabindex="-1"><a class="header-anchor" href="#out-of-service-binary"><span>Out of service (binary)</span></a></h3><p>Level is out if service. Value can be found in the published state on the <code>out_of_service</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. If value equals <code>True</code> out of service is ON, if <code>False</code> OFF.</p><h3 id="filling-numeric" tabindex="-1"><a class="header-anchor" href="#filling-numeric"><span>Filling (numeric)</span></a></h3><p>Tank filling. Value can be found in the published state on the <code>filling</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The unit of this value is <code>%</code>.</p><h3 id="temperature-numeric" tabindex="-1"><a class="header-anchor" href="#temperature-numeric"><span>Temperature (numeric)</span></a></h3><p>Measured temperature value. Value can be found in the published state on the <code>temperature</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The unit of this value is <code>Â°C</code>.</p><h3 id="tank-height-numeric" tabindex="-1"><a class="header-anchor" href="#tank-height-numeric"><span>Tank height (numeric)</span></a></h3><p>Water tank height in cm. Value can be found in the published state on the <code>tank_height</code> property. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;tank_height&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>450</code>. The unit of this value is <code>cm</code>.</p><h3 id="alarm-min-threshold-numeric" tabindex="-1"><a class="header-anchor" href="#alarm-min-threshold-numeric"><span>Alarm min threshold (numeric)</span></a></h3><p>Min threshold for alarm binding. Value can be found in the published state on the <code>alarm_min_threshold</code> property. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;alarm_min_threshold&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p><h3 id="alarm-max-threshold-numeric" tabindex="-1"><a class="header-anchor" href="#alarm-max-threshold-numeric"><span>Alarm max threshold (numeric)</span></a></h3><p>Max threshold for alarm binding. Value can be found in the published state on the <code>alarm_max_threshold</code> property. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;alarm_max_threshold&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p><h3 id="invert-threshold-binary" tabindex="-1"><a class="header-anchor" href="#invert-threshold-binary"><span>Invert threshold (binary)</span></a></h3><p>Invert thresholds for on and off commands. Value can be found in the published state on the <code>invert_threshold</code> property. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;invert_threshold&quot;: NEW_VALUE}</code>. If value equals <code>True</code> invert threshold is ON, if <code>False</code> OFF.</p><h3 id="measurment-period-numeric" tabindex="-1"><a class="header-anchor" href="#measurment-period-numeric"><span>Measurment period (numeric)</span></a></h3><p>Max threshold for alarm binding. Value can be found in the published state on the <code>measurment_period</code> property. It&#39;s not possible to read (<code>/get</code>) this value. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;measurment_period&quot;: NEW_VALUE}</code>. The minimal value is <code>0</code> and the maximum value is <code>3600</code>. The unit of this value is <code>min</code>.</p><h3 id="battery-numeric" tabindex="-1"><a class="header-anchor" href="#battery-numeric"><span>Battery (numeric)</span></a></h3><p>Remaining battery in %. Value can be found in the published state on the <code>battery</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;battery&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The minimal value is <code>0</code> and the maximum value is <code>100</code>. The unit of this value is <code>%</code>.</p><h3 id="voltage-numeric" tabindex="-1"><a class="header-anchor" href="#voltage-numeric"><span>Voltage (numeric)</span></a></h3><p>Reported battery voltage in millivolts. Value can be found in the published state on the <code>voltage</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;voltage&quot;: &quot;&quot;}</code>. It&#39;s not possible to write (<code>/set</code>) this value. The unit of this value is <code>mV</code>.</p>',24))])}]]),c=JSON.parse('{"path":"/devices/Bacchus_Water_level_meter.html","title":"Bacchus Bacchus Water level meter control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Bacchus Bacchus Water level meter control via MQTT","description":"Integrate your Bacchus Bacchus Water level meter via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2025-05-01T17:59:08.000Z"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"devices/Bacchus_Water_level_meter.md"}')}}]);