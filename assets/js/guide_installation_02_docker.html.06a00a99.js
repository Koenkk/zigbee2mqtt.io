"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[56285],{72824:(e,n,a)=>{a.r(n),a.d(n,{comp:()=>t,data:()=>l});var s=a(60362);const i={},t=(0,a(60654).A)(i,[["render",function(e,n){const a=(0,s.g2)("RouteLink");return(0,s.uX)(),(0,s.CE)("div",null,[n[8]||(n[8]=(0,s.Fv)('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><p>It is possible to run Zigbee2MQTT in a Docker container using the official <a href="https://github.com/Koenkk/zigbee2mqtt/pkgs/container/zigbee2mqtt" target="_blank" rel="noopener noreferrer">Zigbee2MQTT Docker image</a>.</p><p>This image support the following architectures: <code>linux/386</code>, <code>linux/amd64</code>, <code>linux/arm/v6</code>, <code>linux/arm/v7</code>, <code>linux/arm64</code> and <code>linux/riscv64</code>.</p><p>The following tags are available:</p><ul><li>Latest release version: <code>latest</code></li><li>Latest dev version (based on <a href="https://github.com/Koenkk/zigbee2mqtt/tree/dev" target="_blank" rel="noopener noreferrer"><code>dev</code></a> branch): <code>latest-dev</code></li><li>Specific release version, e.g: <code>2.0.0</code>, <code>2.0</code>, <code>2</code></li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>For Raspberry Pi 1 and zero users: there is a bug in Docker which selects the wrong image architecture. Before running the container pull the correct image with <code>docker pull ghcr.io/koenkk/zigbee2mqtt --platform linux/arm/v6</code>.</p></div><h2 id="running-the-container" tabindex="-1"><a class="header-anchor" href="#running-the-container"><span>Running the container</span></a></h2>',7)),(0,s.Lk)("p",null,[n[1]||(n[1]=(0,s.eW)("Start by figuring out the location of your adapter as explained ",-1)),(0,s.bF)(a,{to:"/guide/configuration/adapter-settings.html#determine-location-of-the-adapter"},{default:(0,s.k6)(()=>[...n[0]||(n[0]=[(0,s.eW)("here",-1)])]),_:1}),n[2]||(n[2]=(0,s.eW)(".",-1))]),n[9]||(n[9]=(0,s.Fv)('<p>Execute the following command, update the <code>--device</code> parameter to match the location of your adapter.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ <span class="token function">docker</span> run <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--name</span> zigbee2mqtt <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/data:/app/data <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-v</span> /run/udev:/run/udev:ro <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Europe/Amsterdam <span class="token punctuation">\\</span></span>\n<span class="line">   ghcr.io/koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parameters explanation:</strong></p><ul><li><code>--name zigbee2mqtt</code>: Name of container</li><li><code>--restart=unless-stopped</code>: Automatically start on boot and restart after a crash</li><li><code>--device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0</code>: Location of adapter. The path before the <code>:</code> is the path on the host, the path after it is the path that is mapped to inside the container. You should always use the <code>/dev/serial/by-id/</code> path on the host.</li><li><code>-v $(pwd)/data:/app/data</code>: Directory where Zigbee2MQTT stores it configuration (pwd maps to the current working directory)</li><li><code>-v /run/udev:/run/udev:ro</code>: required for auto-detecting the adapter</li><li><code>-e TZ=Europe/Amsterdam</code>: configure the timezone</li><li><code>-p 8080:8080</code>: port forwarding from inside Docker container to host (for the frontend)</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you run the MQTT-Server on the same host (localhost) you could use the IP of the <code>docker0</code> bridge to establish the connection: <code>server: mqtt://172.17.0.1</code>.</p></div>',5)),(0,s.Lk)("p",null,[n[4]||(n[4]=(0,s.eW)("On first start, Zigbee2MQTT will start the onboarding on port 8080. Navigate to this board and configure accordingly. More information about ",-1)),(0,s.bF)(a,{to:"/guide/getting-started/#onboarding"},{default:(0,s.k6)(()=>[...n[3]||(n[3]=[(0,s.eW)("onboarding",-1)])]),_:1}),n[5]||(n[5]=(0,s.eW)(".",-1))]),n[10]||(n[10]=(0,s.Fv)('<p>Once the onboarding is completed Zigbee2MQTT will start.</p><details class="hint-container details"><summary>(Alternative) Rootless container with Docker</summary><p>To improve the security of the deployment you may want to run Zigbee2MQTT as a <em>non-root</em> user.</p><ol><li>Identify the group that has access to the adapter (in Ubuntu, e.g. it might be assigned to <code>dialout</code>). Update <code>ttyACM0</code> to match your adapter location.</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ ls -l /dev/ttyACM0</span>\n<span class="line">crw-rw---- 1 root dialout 166, 0 Nov 5 16:31 /dev/ttyACM0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>If you want to run Zigbee2MQTT using your current user find the <code>uid</code> (UserID) and <code>gid</code> (GroupID):</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ id</span>\n<span class="line">uid=1001(pi) gid=1001(pi) Groups=...</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Start the docker container after updating <code>device</code>, <code>user</code> (uid:gid) and <code>group-add</code>:</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ sudo docker run \\</span>\n<span class="line">   --name=zigbee2mqtt \\</span>\n<span class="line">   --restart=unless-stopped \\</span>\n<span class="line">   -p 8080:8080 \\</span>\n<span class="line">   -v $(pwd)/data:/app/data \\</span>\n<span class="line">   -v /run/udev:/run/udev:ro \\</span>\n<span class="line">   --device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 \\</span>\n<span class="line">   --user 1001:1001 \\</span>\n<span class="line">   --group-add dialout \\</span>\n<span class="line">   -e TZ=Europe/Amsterdam \\</span>\n<span class="line">   ghcr.io/koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parameters explanation:</strong></p><ul><li><code>--user 1001:1001</code>: Run the Zigbee2MQTT process within the container using the provided UserID and GroupID</li><li><code>--group-add dialout</code>: Assign the <code>dialout</code> group to the user to be able to access the device</li></ul></details><details class="hint-container details"><summary>(Alternative) Rootless with Podman (&gt;3.2)</summary><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ podman run \\</span>\n<span class="line">   --name=zigbee2mqtt \\</span>\n<span class="line">   --restart=unless-stopped \\</span>\n<span class="line">   -p 8080:8080 \\</span>\n<span class="line">   -v $(pwd)/data:/app/data \\</span>\n<span class="line">   -v /run/udev:/run/udev:ro \\</span>\n<span class="line">   --device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 \\</span>\n<span class="line">   --group-add keep-groups \\</span>\n<span class="line">   -e TZ=Europe/Amsterdam \\</span>\n<span class="line">   ghcr.io/koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>With SELinux enabled you may need to append a <code>:z</code> suffix to the volume mount: <code>-v $(pwd)/data:/app/data:z</code></p></div></details><h3 id="updating" tabindex="-1"><a class="header-anchor" href="#updating"><span>Updating</span></a></h3><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> pull ghcr.io/koenkk/zigbee2mqtt:latest</span>\n<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> zigbee2mqtt</span>\n<span class="line"><span class="token comment"># Now run the container again with the instructions above</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h2><p>Example of a Docker Compose file:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token key atrule">zigbee2mqtt</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zigbee2mqtt</span>\n<span class="line">        <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/koenkk/zigbee2mqtt</span>\n<span class="line">        <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped</span>\n<span class="line">        <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/app/data</span>\n<span class="line">            <span class="token punctuation">-</span> /run/udev<span class="token punctuation">:</span>/run/udev<span class="token punctuation">:</span>ro</span>\n<span class="line">        <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token comment"># Frontend port</span></span>\n<span class="line">            <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span></span>\n<span class="line">        <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token punctuation">-</span> TZ=Europe/Berlin</span>\n<span class="line">        <span class="token key atrule">devices</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token comment"># Make sure this matched your adapter location</span></span>\n<span class="line">            <span class="token punctuation">-</span> /dev/serial/by<span class="token punctuation">-</span>id/usb<span class="token punctuation">-</span>Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF<span class="token punctuation">-</span>if00<span class="token punctuation">:</span>/dev/ttyACM0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also run a rootless container with Docker Compose by adding the required attributes to the <code>zigbee2mqtt</code> service block in your <code>docker-compose.yml</code>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">group_add</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token punctuation">-</span> dialout</span>\n<span class="line"><span class="token key atrule">user</span><span class="token punctuation">:</span> 1000<span class="token punctuation">:</span><span class="token number">1000</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="starting-the-container" tabindex="-1"><a class="header-anchor" href="#starting-the-container"><span>Starting the container</span></a></h3><p>To start the Docker container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will start all containers listed in the compose file.</p><h3 id="updating-1" tabindex="-1"><a class="header-anchor" href="#updating-1"><span>Updating</span></a></h3><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> compose pull zigbee2mqtt</span>\n<span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will pull any new images for all containers in the compose file, and then restart those that were updated.</p><h2 id="additional-links" tabindex="-1"><a class="header-anchor" href="#additional-links"><span>Additional links</span></a></h2>',20)),(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[(0,s.bF)(a,{to:"/guide/installation/docker/docker_stack.html"},{default:(0,s.k6)(()=>[...n[6]||(n[6]=[(0,s.eW)("Docker Stack device mapping",-1)])]),_:1})]),(0,s.Lk)("li",null,[(0,s.bF)(a,{to:"/guide/installation/docker/docker_synology.html"},{default:(0,s.k6)(()=>[...n[7]||(n[7]=[(0,s.eW)("Docker on Synology DSM 7.0",-1)])]),_:1})])])])}]]),l=JSON.parse('{"path":"/guide/installation/02_docker.html","title":"Docker","lang":"en-US","frontmatter":{"pageClass":"content-page","next":"../configuration/"},"git":{"updatedTime":1762029806000,"contributors":[{"name":"Koen Kanters","username":"","email":"koenkanters94@gmail.com","commits":1}],"changelog":[{"hash":"65fac821d7d53a7e50cd38541621bbb5ac5d9dd0","time":1762029806000,"email":"koenkanters94@gmail.com","author":"Koen Kanters","message":"Update zhc to 25.59.0"}]},"filePathRelative":"guide/installation/02_docker.md"}')}}]);